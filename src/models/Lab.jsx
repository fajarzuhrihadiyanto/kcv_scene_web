/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/lab scene.glb 
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useThree } from '@react-three/fiber'
import gsap from 'gsap'

import Room from './Room'
import NetworkSculptureArea from './network sculpture area/NetworkScultpureArea'
import IndustrialRobotArea from './industrial robot area/IndustrialRobotArea'
import CommandCenterArea from './command center area/CommandCenterArea'
import RobotArea from './robot area/RobotArea'
import LogoArea from './logo area/LogoArea'
import HelixArea from './helix area/HelixArea'
import { ControlsContext } from '../context/ControlsContext'
import useMainStore from '../store/useMainStore'
import { addVector3, useResponsiveScreen } from '../utils'

const Lab = (props) => {

  // get the state and setter from the store
  const focusTarget = useMainStore.useFocusTarget()
  let cameraPosition = useMainStore.useCameraPosition()
  const controlsTargetOffset = useMainStore.useControlsTargetOffset()
  const {isMobile} = useResponsiveScreen()

  const controlsTarget = addVector3(cameraPosition, controlsTargetOffset)

  const group = useRef()
  const { nodes, materials } = useGLTF(process.env.REACT_APP_MODEL_URL)

  const { controls } = React.useContext(ControlsContext)

  const { camera, gl } = useThree()

  React.useEffect(() => {
    if (controls.current) {
      if (focusTarget !== null) {
        // disable control rotation 
        controls.current.enableRotate = false

        // animate camera to focus target
        gsap.to(controls.current.target, {duration: 1, ease: 'power4.inOut', x: controlsTarget[0], y: controlsTarget[1], z: controlsTarget[2]})
        gsap.to(camera.position, {duration: 1, ease: 'power4.inOut', x: cameraPosition[0], y: cameraPosition[1], z: cameraPosition[2]})
      } else {
        // enable control rotation
        controls.current.enableRotate = true

        let camPos = [...cameraPosition]
        if (isMobile) camPos[0] *= 5/3

        // animate back camera to original position 
        gsap.to(camera.position, {duration: 1, x: camPos[0], y: camPos[1], z: camPos[2]})
        gsap.to(controls.current.target, {duration: 1, x: controlsTarget[0], y: controlsTarget[1], z: controlsTarget[2]})
      }
    }
  }, [controls, focusTarget])

  React.useEffect(() => {
    gl.localClippingEnabled = true
  }, [])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <RobotArea nodes={nodes} materials={materials} />
        <Room nodes={nodes} materials={materials} />
        <NetworkSculptureArea nodes={nodes} materials={materials} />
        <IndustrialRobotArea nodes={nodes} materials={materials} />
        <CommandCenterArea nodes={nodes} materials={materials} />
        <LogoArea nodes={nodes} materials={materials} />
        <HelixArea nodes={nodes} materials={materials} />
      </group>
    </group>
  )
}

useGLTF.preload(process.env.REACT_APP_MODEL_URL)

export default Lab
